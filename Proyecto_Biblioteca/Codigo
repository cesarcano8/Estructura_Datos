## üìò Clases y M√©todos

### `Libro`
- **Atributos:** `titulo`, `autor`, `isbn`.
- **M√©todos principales:**
  - Getters y Setters.
  - `toString()` ‚Üí representaci√≥n legible de un libro.

### `Libreria`
- Usa `ArrayList<Libro>` en vez de un arreglo fijo.
- **M√©todos:**
  - `addBook(Libro libro)` ‚Üí agrega un libro.
  - `searchByTitle(String titulo)` ‚Üí busca un libro por su t√≠tulo.
  - `removeBook(int posicion)` ‚Üí elimina un libro en una posici√≥n.
  - `displayAllBooks()` ‚Üí muestra todos los libros.

### `LibreriaTest`
- Contiene un `main` para probar la librer√≠a.
- M√©todo `llenarDatosLiberia()` agrega libros de ejemplo.

### `LibreriaCMD`
- Clase principal para interactuar con el usuario.
- Muestra un men√∫ con opciones:
  1. Agregar libro.
  2. Buscar libro.
  3. Eliminar libro.
  4. Mostrar libros.
  5. Salir.

---

Opci√≥n 1 ‚Üí addBook(Libro libro)

Este m√©todo agrega un nuevo libro a la librer√≠a usando un objeto de la clase Libro.
Internamente, simplemente usa libros.add(libro) para a√±adirlo al ArrayList.
Luego muestra un mensaje en consola confirmando la operaci√≥n:
Libro agregado: Libro{titulo='...', autor='...', isbn='...'}


Ejemplo de uso en c√≥digo:
Libro nuevo = new Libro("Harry Potter", "J.K. Rowling", "1234");
libreria.addBook(nuevo);


Salida en consola:
Libro agregado: Libro{titulo='Harry Potter', autor='J.K. Rowling', isbn='1234'}


Desde el men√∫ interactivo (LibreriaCMD):
El usuario selecciona la opci√≥n 1.
El programa pide:

T√≠tulo del libro
Autor del libro
ISBN

Crea un objeto Libro con esos datos y lo pasa a addBook.

Opcion 2 ‚Üí Buscar libro

Qu√© hace
Busca un libro en la librer√≠a comparando el t√≠tulo proporcionado por el usuario con el t√≠tulo de cada Libro almacenado y devuelve el primer Libro que coincida (o null si no encuentra ninguno).

Implementaci√≥n (ejemplo actual)

public Libro searchByTitle(String titulo) {
    for (Libro libro : libros) {
        if (libro != null && libro.getTitulo().equalsIgnoreCase(titulo)) {
            return libro;
        }
    }
    return null;
}


Puntos importantes

Usa equalsIgnoreCase(...) ‚Üí no distingue may√∫sculas/min√∫sculas (por ejemplo, "el principito" = "El Principito").
Devuelve el primer libro que coincida exactamente con el t√≠tulo.
Si hay varios libros con el mismo t√≠tulo, los dem√°s no se devuelven.
Si no encuentra coincidencia, devuelve null. En la interfaz (LibreriaCMD) se comprueba if (foundBook != null) para informar al usuario.
Complejidad temporal: O(n) (recorre la lista hasta encontrar coincidencia).
Uso desde LibreriaCMD 

Usuario elige la opci√≥n 2.
Programa lee la l√≠nea con scanner.nextLine() y lo pasa a searchByTitle(...).
Si devuelve un objeto Libro, se imprime Libro encontrado: .... Si devuelve null, se imprime Libro no encontrado.

Ejemplo real

Seleccione una opci√≥n: 2
Ingrese el t√≠tulo del libro a buscar: Don Quijote de la Mancha
Libro encontrado: Libro{titulo='Don Quijote de la Mancha', autor='Miguel de Cervantes', isbn='978-1-56619-909-4'}

Si no existe:

Seleccione una opci√≥n: 2
Ingrese el t√≠tulo del libro a buscar: Harry Potter
Libro no encontrado.

Opci√≥n 3 ‚Üí removeBook

Este m√©todo elimina un libro de la librer√≠a usando su √≠ndice en el ArrayList.
Primero valida si la posici√≥n es correcta (no negativa y menor al tama√±o de la lista).
Si es v√°lida:

Recupera el libro en esa posici√≥n.
Lo muestra por consola como ‚ÄúLibro eliminado‚Äù.
Lo elimina del ArrayList con libros.remove(posicion).
Si la posici√≥n no existe, muestra:

Posici√≥n inv√°lida.

Opci√≥n 4 ‚Üí displayAllBooks()

Este m√©todo recorre el ArrayList y muestra todos los libros registrados.
Si la lista est√° vac√≠a, imprime:
No hay libros disponibles en la librer√≠a.
Si hay libros, los muestra con su posici√≥n en la lista y su representaci√≥n toString().

Ejemplo:

libreria.displayAllBooks();


Salida:

Posici√≥n 0: Libro{titulo='Cien A√±os de Soledad', autor='Gabriel Garc√≠a M√°rquez', isbn='978-3-16-148410-0'}
Posici√≥n 1: Libro{titulo='La Sombra del Viento', autor='Carlos Ruiz Zaf√≥n', isbn='978-0-7432-7356-5'}